                                                                --DONE--
NOP //00      00 000 000 MISC: Hardcode?
LDmnnSP       00 001 000 *
STOP //10     00 010 000 
JRn           00 011 000 * JR: 00(1:cond?)(1:Z/C)(1:N?)(3:op)
JRNZn //20    00 100 000 *   if not cond: use next 2 bits as op
JRNCn //30    00 110 000 * 
JRZn          00 101 000 * 
JRCn          00 111 000 *

ADDHLBC       00 00 1 001 ADDLD16: 00(2:dd)(1:ADD/LD)(3:op)
ADDHLDE       00 01 1 001   //Generate Size Bit
ADDHLHL       00 10 1 001 
ADDHLSP       00 11 1 001 
LDBCnn        00 00 0 001 * 
LDDEnn        00 01 0 001 * 
LDHLnn        00 10 0 001 * 
LDSPnn        00 11 0 001 * 

LDmBCA        00 00 0 010 LDmem: 00(1:mHL?)x(1:mem/reg)(3:op)
LDmDEA        00 01 0 010   if not mHL: bit 4 = src
LDImHLA       00 10 0 010       src: 0 = BC
LDDmHLA       00 11 0 010            1 = DE
LDAmBC        00 00 1 010   else: bit 4 = inc/dec hl
LDAmDE        00 01 1 010
LDIAmHL       00 10 1 010
LDDAmHL       00 11 1 010

INCBC         00 00 0 011 INC/DECDD: 00(2:dd)(1:inc/dec)(3:op)
INCDE         00 01 0 011 
INCHL         00 10 0 011 
INCSP         00 11 0 011 
DECBC         00 00 1 011
DECDE         00 01 1 011 
DECHL         00 10 1 011 
DECSP         00 11 1 011 

INCB          00 000 100 INC: 00(3:src)(3:op)
INCC          00 001 100 
INCD          00 010 100 
INCE          00 011 100 
INCH          00 100 100 
INCL          00 101 100 
INCmHL        00 110 100 
INCA          00 111 100

DECA          00 111 101 DEC: 00(3:src)(3:op)
DECB          00 000 101 
DECC          00 001 101 
DECD          00 010 101 
DECE          00 011 101 
DECH          00 100 101 
DECL          00 101 101 
DECmHL        00 110 101 

LDAn          00 111 110 LDn: 00(3:src)(3:op) //Use LS Engine logic
LDBn          00 000 110 
LDCn          00 001 110 
LDDn          00 010 110 
LDEn          00 011 110 
LDHn          00 100 110 
LDLn          00 101 110 
LDmHLn        00 110 110 

RLCA //07     00 0 0 0 111 ROT/MISC: 00(1:rot/cont)(1:carry?)(1:dir/spec_op)(3:op)
RRCA          00 0 0 1 111      //Generate Extension Bit
RLA //17      00 0 1 0 111
RRA           00 0 1 1 111 
DAA //27      00 1 0 0 111      //Generate Misc Bit
NOT           00 1 0 1 111 
SCF //37      00 1 1 0 111 
CCF           00 1 1 1 111 

LDAA          01 111 111 LD: 01(3:dest)(3:src)
LDAB          01 111 000 
LDAC          01 111 001 
LDAD          01 111 010 
LDAE          01 111 011 
LDAH          01 111 100 
LDAL          01 111 101 
LDAmHL        01 111 110 
LDBA //47     01 000 111 
LDBB //40     01 000 000 
LDBC          01 000 001 
LDBD          01 000 010 
LDBE          01 000 011 
LDBH          01 000 100 
LDBL          01 000 101 
LDBmHL        01 000 110 
LDCA          01 001 111 
LDCB          01 001 000 
LDCC          01 001 001 
LDCD          01 001 010 
LDCE          01 001 011 
LDCH          01 001 100 
LDCL          01 001 101 
LDCmHL        01 001 110 
LDDA //57     01 010 111 
LDDB //50     01 010 000 
LDDC          01 010 001 
LDDD          01 010 010 
LDDE          01 010 011 
LDDH          01 010 100 
LDDL          01 010 101 
LDDmHL        01 010 110 
LDEA          01 011 111 
LDEB          01 011 000 
LDEC          01 011 001 
LDED          01 011 010 
LDEE          01 011 011 
LDEH          01 011 100 
LDEL          01 011 101 
LDEmHL        01 011 110 
LDHA //67     01 100 111 
LDHB //60     01 100 000 
LDHC          01 100 001 
LDHD          01 100 010 
LDHE          01 100 011 
LDHH          01 100 100 
LDHL          01 100 101 
LDHmHL        01 100 110 
LDLA          01 101 111 
LDLB          01 101 000 
LDLC          01 101 001 
LDLD          01 101 010 
LDLE          01 101 011 
LDLH          01 101 100 
LDLL          01 101 101 
LDLmHL        01 101 110 
LDmHLA //77   01 110 111
LDmHLB //70   01 110 000 
LDmHLC        01 110 001 
LDmHLD        01 110 010 
LDmHLE        01 110 011 
LDmHLH        01 110 100 
LDmHLL        01 110 101 
HALT          01 110 110 

ADCAA         10 001 111 AR: 10(3:op)(3:reg_sel)
ADCAB         10 001 000   op: 000 - ADDA
ADCAC         10 001 001       001 - ADCA
ADCAD         10 001 010       010 - SUBA
ADCAE         10 001 011       011 - SBCA
ADCAH         10 001 100       100 - AND
ADCAL         10 001 101       101 - XOR
ADCAmHL       10 001 110       110 - OR
ADDAA //87    10 000 111       111 - CP
ADDAB //80    10 000 000 
ADDAC         10 000 001 
ADDAD         10 000 010 
ADDAE         10 000 011 
ADDAH         10 000 100 
ADDAL         10 000 101 
ADDAmHL       10 000 110 
SBCAA         10 011 111
SBCAB         10 011 000
SBCAC         10 011 001
SBCAD         10 011 010
SBCAE         10 011 011
SBCAH         10 011 100
SBCAL         10 011 101
SBCAmHL       10 011 110
SUBAA //97    10 010 111
SUBAB //90    10 010 000
SUBAC         10 010 001
SUBAD         10 010 010
SUBAE         10 010 011
SUBAH         10 010 100
SUBAL         10 010 101
SUBAmHL       10 010 110
ANDA //A7     10 100 111
ANDB //A0     10 100 000
ANDC          10 100 001
ANDD          10 100 010
ANDE          10 100 011
ANDH          10 100 100
ANDL          10 100 101
ANDmHL        10 100 110
XORA          10 101 111
XORB          10 101 000
XORC          10 101 001
XORD          10 101 010
XORE          10 101 011
XORH          10 101 100
XORL          10 101 101
XORmHL        10 101 110
ORA //B7      10 110 111
ORB //B0      10 110 000
ORC           10 110 001
ORD           10 110 010
ORE           10 110 011
ORH           10 110 100
ORL           10 110 101
ORmHL         10 110 110
CPA           10 111 111
CPB           10 111 000
CPC           10 111 001
CPD           10 111 010
CPE           10 111 011
CPH           10 111 100
CPL           10 111 101
CPmHL         10 111 110

                                                                        --11--
//Stack Engine? SP Mod, etc. MOST 00 POP FROM STACK
RETNZ //C0    11 000 000 * RETC: 11(1:ident=0)(1:Z/C)(1:N)(3:op)
RETZ          11 001 000 *
RETNC //D0    11 010 000 *
RETC          11 011 000 *

LDHmnA //E0   11 100 000 * HW: 11(1:ident=1)(1:spec_op)(1:sp/gpu)(3:op)
LDHAmn //F0   11 110 000 *
ADDSPd        11 101 000 *
LDHLSPd       11 111 000 * 

RET           11 001 001 * RETU: 11(1:ret/HL)(1:spec_op)(1:ident=1)(3:op)
RETI          11 011 001 *
JPmHL         11 101 001 *
LDSPHL        11 111 001 

POPBC         11 000 001    POP:11(2:src)(1:ident=0)(3:op)
POPDE         11 010 001    //TODO: Rearrange to standardize spec_op?
POPHL         11 100 001
POPAF         11 110 001

//Stack Engine? ALL 10 PUSH TO STACK
CALLNZnn      11 000 100 * CALLC: 11(1:valid=0)(1:Z/C)(1:N)(3:op)
CALLZnn       11 001 100 *
CALLNCnn      11 010 100 *
CALLCnn       11 011 100 *

XX5           11 100 100   HWX: 11(1:valid=1)(2:XX)(3:op)
XX7           11 101 100 
XXA           11 110 100 
XXB           11 111 100 

CALLnn        11 001 101 * CALLU: 11(2:valid=00)(1:ident=1)(3:op)
XX3           11 011 101 
XX8           11 101 101 
XXC           11 111 101 

PUSHBC        11 000 101   PUSH: 11(2:src)(1:ident=0)(3:op)
PUSHDE        11 010 101
PUSHHL        11 100 101
PUSHAF        11 110 101

//Flow Control? PC Mod,etc.
JPNZnn        11 000 010 * JPC: 11(1:ident=0)(1:Z/C)(1:N)(3:op)
JPZnn         11 001 010 *
JPNCnn        11 010 010 *
JPCnn         11 011 010 *

LDHmCA        11 100 010   HW: 11(1:ident=1)(1:spec_op/dir)(1:hw/mem)(3:op)
XX9           11 110 010 
LDmnnA        11 101 010 *
LDAmnn        11 111 010 *

JPnn          11 000 011 * JPU: 11(1:ident=0)(1:valid=0)(1:spec_op)(3:op)
Extops        11 001 011 * 
XX1           11 010 011 
XX2           11 011 011 

XX4           11 100 011   I: 11(1:ident=1)(1:valid=1)(1:spec_op)(3:op)
XX6           11 101 011 
DI            11 110 011 
EI            11 111 011 

//Flow Control? USE ALU LOGIC
ADDAn         11 000 110 * ARn: 11(1:ident=0)(1:spec_op)(1:carry)(3:op)
ADCAn         11 001 110 *
SBCAn         11 011 110 *
SUBAn         11 010 110 *

ANDn          11 100 110 * LOGn: 11(1:ident=1)(2:spec_op)(3:op)
XORn          11 101 110 *
ORn           11 110 110 *
CPn           11 111 110 *

RST0 //C7     11 000 111 * RST: 11(3:pc_loc>>3)(3:op)
RST8          11 001 111 *
RST10 //D7    11 010 111 *
RST18         11 011 111 *
RST20 //E7    11 100 111 *
RST28         11 101 111 *
RST30 //F7    11 110 111 *
RST38         11 111 111 *
